apply plugin: 'cpp'
apply plugin: 'application'
apply plugin: 'java'
sourceCompatibility = 1.8
//entry
mainClassName = "com.test.Main"
repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.12'
}

compileJava {
  options.compilerArgs += ["-h", file("src/main/jni")]
}

def JAVA_HOME = System.getenv("JAVA_HOME")
def jniLibName = "bridge"
model {
    components {
        "${jniLibName}"(NativeLibrarySpec) {
//        NativeExecutableSpec for executable
//        NativeLibrarySpec for library
            sources {
                cpp {
                    source {
                        srcDir 'src/main/jni'
                    }
                }
            }
        }
    }
    toolChains {
        visualCpp(VisualCpp) {
            eachPlatform {
                cppCompiler.withArguments { args ->

                }
            }
        }
        gcc(Gcc) {
            eachPlatform {
                if (System.properties['os.name'].equals("Mac OS X")) {
                    cppCompiler.withArguments { args ->
                        args << "-I" + JAVA_HOME + "/include"
                        args << "-I" + JAVA_HOME + "/include/darwin"
                        args << "-O2"
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lstdc++"
                    }
                } else {
                    cppCompiler.withArguments { args ->
                        args << "-I" + JAVA_HOME + "/include"
                        args << "-I" + JAVA_HOME + "/include/linux"
                        args << "-O2"
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lstdc++"
                    }
                }
            }
        }
        clang(Clang) {
            eachPlatform {
                if (System.properties['os.name'].equals("Mac OS X")) {
                    cppCompiler.withArguments { args ->
                        args << "-I" + JAVA_HOME + "/include"
                        args << "-I" + JAVA_HOME + "/include/darwin"
                        args << "-O2"
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lstdc++"
                    }
                } else {
                    cppCompiler.withArguments { args ->
                        args << "-I" + JAVA_HOME + "/include"
                        args << "-I" + JAVA_HOME + "/include/linux"
                        args << "-O2"
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lstdc++"
                    }
                }
            }
        }
    }
}


run {
    //add shared library to java.library.path when run gradle run
    systemProperty 'java.library.path', file("${buildDir}/libs/${jniLibName}/shared")
}

static def currentOS() {
    final String p = System.getProperty("os.name").toLowerCase();
    if (p.contains("linux")) {
        return "linux"
    } else if (p.contains("os x") || p.contains("darwin")) {
        return "darwin"
    } else if (p.contains("windows")) {
        return "windows"
    } else {
        return p.replaceAll("\\s", "")
    }
}

static def currentArchitecture() {
    final String arch = System.getProperty("os.arch").toLowerCase()
    return (arch.equals("amd64")) ? "x86_64" : arch
}


jar {
    //entry
    manifest {
        attributes 'Main-Class': mainClassName
    }
    //copy shared library to classpath when assemble a jar
    from(file("${buildDir}/libs/${jniLibName}/shared")) {
        into "com/test/${currentOS()}-${currentArchitecture()}"
    }

}

project.afterEvaluate {
    def compileJavaTask = project.tasks.findByName("compileJava")

    tasks.all { Task task ->
        if (task.name.equalsIgnoreCase("${jniLibName}SharedLibrary")) {
            compileJavaTask.dependsOn task
        }
        if (task.name.equalsIgnoreCase("${jniLibName}StaticLibrary")) {
            compileJavaTask.dependsOn task
        }
    }
}
